txtFile <- apply(cfgFile, 1, as.character)
schInd <- grep('schedule', txtFile)
schInd
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
txtFile
?write.delim
?write.table
write.csv(txtFile, file = 'V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg')
txtFile
back2factor <- sapply(txtFile, as.factor)
back2factor
txtFile
as.factor(txtFile[1])
as.factor(txtFile[2])
back2factor
rm(back2factor)
back2factor <- sapply(txtFile, funtion(x) as.factor(x))
back2factor <- sapply(txtFile, function(x) as.factor(x))
back2factor[1]
as.character(back2factor[1])
as.data.frame(back2factor)
write.csv(back2factor, file = 'V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg')
write.csv(txtFile, file = 'V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg', quote = F)
txtFile
write.csv(txtFile, file = 'V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg', quote = F, row.names = F)
rm(list = ls())
source('C:/Users/venz586/Desktop/txtReplace.R', echo=TRUE)
txtFile
?write.csv
source('C:/Users/venz586/Desktop/txtReplace.R', echo=TRUE)
source('C:/Users/venz586/Desktop/txtReplace.R', echo=TRUE)
write.csv(txtFile, file = 'V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg',
quote = F, row.names = F)
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?findSS
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?confRaw
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1 - 175/176
?confRaw
require(scs)
rho <- c(1, .5, .25)
N <- rep(1000,3)
B <- 175
confRaw(rep(0,3), rho, N, B)
confRaw(rep(0,3), rho, N, B, 30)
confRaw(c(1,0,0), rho, N, B, 30)
source('~/.active-rstudio-document', echo=TRUE)
ub <- floor(.01*sum(N))
source('~/.active-rstudio-document', echo=TRUE)
p = B/(1+B)
p
1-p
?findSS
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
p
(1-p)*100
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
require(scs)
?findSS
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rm(list = ls())
?writeLines
require(cjr)
?fnrConf.hgeo
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
thresh
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?calcConf
calcConf(n1=n1, n2=n2, thresh=thresh, N=n, prior.prob = prior, r = rho)
calcConf(n1=n1, n=n2, thresh=thresh, N=n, prior.prob = prior, r = rho)
calcConf(n1=n1, n2=n2, thresh=thresh, N=N, prior.prob = prior, r = rho)
calcConf(n1=n1, n2=n2, thresh=thresh, N=N, maxN = 1e05, prior.prob = prior, r = rho)
1 - .034
1 - .027
1-.011
.174/.07
.07/.174
.034/.089
.027/.046
.011/.014
require(scs)
?findSS
load("V:/Lines of Evidence/LoE_Brett_2_17_15.RData")
building1
building2
load("V:/Lines of Evidence/LoE_Brett_2_17_15_srs.RData")
srs
building1
building2
srs
source('C:/Users/venz586/Desktop/EnergyPlusRhipe/R/Read.mtr.R', echo=TRUE)
fpath <- 'C:/Users/venz586/Desktop/EnergyPlusRhipe/inst/extdata/Building_00536.mtr.gz'
a = gzfile(fpath)
rawfile = scan(a,sep="\t",what="char",quiet=T,quote="")
head(rawFile)
head(rawfile)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_CIN__opt_train_60min.Rdata")
source('C:/Users/venz586/Desktop/localRMSE.R', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_DUK__opt_train_60min.Rdata")
source('C:/Users/venz586/Desktop/localRMSE.R', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_EES__opt_train_60min.Rdata")
source('C:/Users/venz586/Desktop/localRMSE.R', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_LIND__opt_train_60min.Rdata")
source('C:/Users/venz586/Desktop/localRMSE.R', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_MECS__opt_train_60min.Rdata")
source('C:/Users/venz586/Desktop/localRMSE.R', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NEPT__opt_train_60min.Rdata")
source('C:/Users/venz586/Desktop/localRMSE.R', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NYIS__opt_train_60min.Rdata")
source('C:/Users/venz586/Desktop/localRMSE.R', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_CIN__opt_train_15min.Rdata")
source('C:/Users/venz586/Desktop/localRMSE.R', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_EES__opt_train_15min.Rdata")
source('C:/Users/venz586/Desktop/localRMSE.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(lambda)
colnames(lambda) <- c('year', 'month', 'day', 'time', 'price')
head(lambda)
plot(lambda$price)
plot(lambda$price, pch = '.')
sinPrice <- sin(lambda$price)
plot(sinPrice)
plot(sinPrice[1:100])
plot(sinPrice[1:100], type = 'l')
lambda$time[1:100]
lambda$time[1:96]
lambda$time[1:97]
plot(lambda$time[1:97], sinPrice[1:97])
plot(lambda$time[1:97], sinPrice[1:97], type = 'l')
plot(lambda$time[1:96], sinPrice[1:96], type = 'l')
plot(lambda$price[1:96])
plot(lambda$price[1:96], type = 'l')
lines(sinPrice[1:96], col = 'red')
plot(scale(lambda$price[1:96]), type = 'l')
lines(sinPrice[1:96], col = 'red')
find.freq <- function(x)
{
n <- length(x)
spec <- spec.ar(c(x),plot=FALSE)
if(max(spec$spec)>10) # Arbitrary threshold chosen by trial and error.
{
period <- round(1/spec$freq[which.max(spec$spec)])
if(period==Inf) # Find next local maximum
{
j <- which(diff(spec$spec)>0)
if(length(j)>0)
{
nextmax <- j[1] + which.max(spec$spec[j[1]:500])
period <- round(1/spec$freq[nextmax])
}
else
period <- 1
}
}
else
period <- 1
return(period)
}
find.freq(lambda$price[1:96])
lambda$price[c(1, 29, 58, 87)]
summary(lambda$price[1:96])
summary(lambda$price[97:(96+97)])
96*7
summary(lambda$price[1:672])
summary(lambda$price[673:(672*2)])
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
head(lambda)
summary(lambda$price)
f1 <- subset(price, price < 0)
price <- lambda$price
f1 <- subset(price, price < 0)
f2 <- subset(price, price > 0 && price < 30)
f3 <- subset(price, price > 30 && price < 40)
f4 <- subset(price, price > 40)
f2
f2 <- subset(price, price > 0 && price < 30)
rm(f2)
f4
f2 <- subset(price, (price > 0 && price < 30))
f3 <- subset(price, price > 30 && price < 40)
f2 <- price[which(price > 0 && price <= 30)]
which(price > 0 && price <= 30)
price <- lambda$price
f2 <- price[which(price > 0 && price <= 30)]
f2 <- subset(price, price <= 30)
f3 <- subset(price, price > 30)
f4 <- subset(price, price > 40)
price <- lambda$price
which(price > 0 && price <= 30)
price
class(price)
price > 0 && price <= 30
i1 <- sapply(price, function(x) x > 0 && x <= 30)
i2 <- sapply(price, function(x) x > 30 && x <= 40)
f1 <- subset(price, price < 0)
f4 <- subset(price, price > 40)
f2 <- price[i1]
f3 <- price[i2]
facPrice <- price
facPrice[i1] <- 'p < $0'
facPrice[i2] <- 'p > $0 && p <= $30'
facPrice[i3] <- 'p > $30 && p <= $40'
i3 <- sapply(price, function(x) x > 30 && x <= 40)
i4 <- sapply(price, function(x) x > 40)
i1 <- sapply(price, function(x) < 0)
i2 <- sapply(price, function(x) x > 0 && x <= 30)
i3 <- sapply(price, function(x) x > 30 && x <= 40)
i4 <- sapply(price, function(x) x > 40)
facPrice <- price
facPrice[i1] <- 'p < $0'
facPrice[i2] <- 'p > $0 && p <= $30'
facPrice[i3] <- 'p > $30 && p <= $40'
facPrice[i4] <- 'p > $40'
head(facPrice)
facPrice <- as.factor(facPrice)
head(facPrice)
plot(facPrice)
hist(price)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(facPrice)
facPrice
belowZero <- which(i1)
belowZero
?diff
diff(belowZero)
plot(price, type = 'l')
plot(price, pch = '.')
head(lambda)
act <- read.delim('C:/Users/venz586/Desktop/PJM_noPCR/Dat/LIND/NET.m15.spl.sch',
header = F, sep = '')
head(act)
act <- act[which(act$V1 == '140512_0900'):length(act),]
tail(lambda)
tail(act)
act
tail(act, 20)
rm(list = ls())
lambda <- read.delim('C:/Users/venz586/Desktop/PJM_noPCR/Dat/LIND/LamNet.m15.ipl.act',
header = F, sep = '')
act <- read.delim('C:/Users/venz586/Desktop/PJM_noPCR/Dat/LIND/NET.m15.spl.sch',
header = F, sep = '')
tail(act)
rm(list = ls())
lambda <- read.delim('C:/Users/venz586/Desktop/PJM_noPCR/Dat/LIND/LamNet.m15.ipl.act',
header = F, sep = '')
dataFilePath <- 'C:/Users/venz586/Desktop/PJM_noPCR/Dat/LIND/NET.m15.spl.sch'
# Read in raw schedule data and make sure to only get the correct number of columns
colNames <- c("time", paste("EES_TOT", c("_actual", "_15m", "_30m", "_45m", "_60m", "_75m",
"_90m", "_105m", "_120m", "_135m", "_150m", "_165m",
"_180m", "_195m", "_210m", "_225m", "_240m"), sep=""))
Ncol <- max(count.fields(dataFilePath, sep = ''))
data <- read.delim(dataFilePath, header = FALSE, sep=" ",
quote = NULL, col.names = paste('V', 1:Ncol, sep = ''))
data <- data[,1:length(colNames)]
colnames(data) <- colNames
head(data)
tail(data)
tail(data)
act <- data[which(data$time == '140512_0900'):nrow(data),]
head(act)
price <- lambda$price
plot(act$EES_TOT_actual ~ price)
lambda <- read.delim('C:/Users/venz586/Desktop/PJM_noPCR/Dat/LIND/LamNet.m15.ipl.act',
header = F, sep = '')
price <- lambda$price
price <- lambda$price
head(lambda)
colnames(lambda) <- c('year', 'month', 'day', 'time', 'price')
price <- lambda$price
plot(act$EES_TOT_actual ~ price)
hist(price)
lines(hist(act$EES_TOT_actual))
act <- act[act$EES_TOT_actual != 0,]
lambda <- lambda[act$EES_TOT_actual != 0,]
rm(list = ls())
lambda <- read.delim('C:/Users/venz586/Desktop/PJM_noPCR/Dat/LIND/LamNet.m15.ipl.act',
header = F, sep = '')
dataFilePath <- 'C:/Users/venz586/Desktop/PJM_noPCR/Dat/LIND/NET.m15.spl.sch'
# Read in raw schedule data and make sure to only get the correct number of columns
colNames <- c("time", paste("EES_TOT", c("_actual", "_15m", "_30m", "_45m", "_60m", "_75m",
"_90m", "_105m", "_120m", "_135m", "_150m", "_165m",
"_180m", "_195m", "_210m", "_225m", "_240m"), sep=""))
Ncol <- max(count.fields(dataFilePath, sep = ''))
data <- read.delim(dataFilePath, header = FALSE, sep=" ",
quote = NULL, col.names = paste('V', 1:Ncol, sep = ''))
data <- data[,1:length(colNames)]
colnames(data) <- colNames
colnames(lambda) <- c('year', 'month', 'day', 'time', 'price')
# only get the actuals which correspond to lambda
act <- data[which(data$time == '140512_0900'):nrow(data),]
zeroInd <- which(act$EES_TOT_actual != 0)
act <- act[zeroInd,]
lambda <- lambda[zeroInd,]
price <- lambda$price
plot(act$EES_TOT_actual ~ price)
unique(act$EES_TOT_actual)
uniAct <- unique(act$EES_TOT_actual)
byValue <- sapply(uniAct, function(u) which(act$EES_TOT_actual == u))
byValue[1]
byValue <- lapply(uniAct, function(u) which(act$EES_TOT_actual == u))
t1 <- data.frame('actual' = act[byValue[[1]]], 'price' = price[byValue[[1]]])
rm(list = ls())
lambda <- read.delim('C:/Users/venz586/Desktop/PJM_noPCR/Dat/LIND/LamNet.m15.ipl.act',
header = F, sep = '')
dataFilePath <- 'C:/Users/venz586/Desktop/PJM_noPCR/Dat/LIND/NET.m15.spl.sch'
# Read in raw schedule data and make sure to only get the correct number of columns
colNames <- c("time", paste("EES_TOT", c("_actual", "_15m", "_30m", "_45m", "_60m", "_75m",
"_90m", "_105m", "_120m", "_135m", "_150m", "_165m",
"_180m", "_195m", "_210m", "_225m", "_240m"), sep=""))
Ncol <- max(count.fields(dataFilePath, sep = ''))
data <- read.delim(dataFilePath, header = FALSE, sep=" ",
quote = NULL, col.names = paste('V', 1:Ncol, sep = ''))
data <- data[,1:length(colNames)]
colnames(data) <- colNames
colnames(lambda) <- c('year', 'month', 'day', 'time', 'price')
# only get the actuals which correspond to lambda
act <- data[which(data$time == '140512_0900'):nrow(data),]
zeroInd <- which(act$EES_TOT_actual != 0)
act <- act[zeroInd, 'EES_TOT_actual']
lambda <- lambda[zeroInd,]
price <- lambda$price
# Split up act/price by unique value
uniAct <- unique(act)
byValue <- lapply(uniAct, function(u) which(act == u))
t1 <- data.frame('actual' = act[byValue[[1]]], 'price' = price[byValue[[1]]])
t1
hist(t1$price)
?hist
hist(t1$price, breaks = 25)
t2 <- data.frame('actual' = act[byValue[[2]]], 'price' = price[byValue[[2]]])
hist(t2$price, breaks = 25)
t2
t2 <- data.frame('actual' = act[byValue[[3]]], 'price' = price[byValue[[3]]])
head(t2)
hist(t2$price)
hist(t2$price, breaks = 10)
hist(t2$price, breaks = 20)
hist(t2$price, breaks = 30)
hist(t2$price, breaks = 40)
hist(t2$price, breaks = 50)
summary(t2$price)
t2$price - median(t2$price)
t2$price - mean(t2$price)
hist(t2$price - mean(t2$price))
hist(t2$price - mean(t2$price), breaks = 10)
hist(t2$price - mean(t2$price), breaks = 20)
scale(t2$price)
hmm <- unlist(scale(t2$price))
hist(hmm)
hist(hmm, breaks = 20)
head(t2)
tail(t2)
plot(t2$price)
byValue[[3]]
diff(byValue[[3]])
rm(list = ls())
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_DUK__opt_train_60min.Rdata")
tail(dat, 20)
bma <- read.delim('C:/Users/venz586/Desktop/PJM_ar8_2_17/Dat/CIN/BMA_raw.m15.spl.for', header = F, sep = '')
dataFilePath <- 'C:/Users/venz586/Desktop/PJM_ar8_2_17/Dat/CIN/NET.m15.spl.sch'
# Read in raw schedule data and make sure to only get the correct number of columns
colNames <- c("time", paste("EES_TOT", c("_actual", "_15m", "_30m", "_45m", "_60m", "_75m",
"_90m", "_105m", "_120m", "_135m", "_150m", "_165m",
"_180m", "_195m", "_210m", "_225m", "_240m"), sep=""))
Ncol <- max(count.fields(dataFilePath, sep = ''))
data <- read.delim(dataFilePath, header = FALSE, sep=" ",
quote = NULL, col.names = paste('V', 1:Ncol, sep = ''))
data <- data[,1:length(colNames)]
colnames(data) <- colNames
head(bma)
i1 <- which(data$time == head(bma$V1,1))
i1 <- which(as.character(data$time) == head(bma$V1,1))
i2 <- which(as.character(data$time) == tail(bma$V1,1))
sch <- data[i1:i2,]
sixMin <- sqrt(mean((bma$V2[5:nrow(bma)] - bma$V4[1:(nrow(bma)-4)])^2))
smSch <- sqrt(mean((sch$EES_TOT_actual[5:nrow(sch)] - sch$EES_TOT_60m[1:(nrow(sch)-4)])^2))
5000/4
library(trelliscope)
setwd('~/docs-csp2015/demos/power_demo/')
dir
dir()
d <- read.csv("retailBuildings.csv")
head(d)
str(d)
d$dateTime <- as.POSIXct(d$dateTime)
d$date <- as.POSIXct(d$date)
str(d)
summary(d)
with(d, table(building))
sel <- c("building", "year", "quarter", "month", "monthName", "week", "weekday")
apply(d[,sel], MARGIN = 2, table)
with(d, table(month, building))
library(plyr)
byDate <- divide(d, by = "date", postTransFn = function(x) arrange(x, building, dateTime))
str(byDate[1])
# Now let's compute the range of the power so we can use the same axes for all
# the plots
powerLims <- range(d$Power.KW)
tempLims <- range(d$OAT.F)
power.by.time <- function(x) {
# Get the x and y axis limits
# Global limits for y
ylim <- powerLims
# Local limits for x
xlim <- range(x$dateTime)
# Set plotting options
par(las = 2, mar = c(4, 4, 0.5, 0.5))
# Create a blank plot
with(x, plot(dateTime, Power.KW, type = "n", xlim = xlim, ylim = ylim,
xlab = "", ylab = "Power (KW)"))
# Add in the data for each building, giving each building a different color
for (i in as.character(2:5)) {
with(x[x$building == i,],
lines(dateTime, Power.KW, col = as.numeric(i) - 1, lwd = 2))
}
# Add a legend to the plot
legend(xlim[1] + 0.5 * diff(xlim), ylim[1],
paste("Building", 2:5),
lty = 1, col = c(2:5) - 1, lwd = 3, yjust = 0)
# Returning NULL is required by trelliscope when the plotting function is
# base R code (as opposed to plots generated by lattice or ggplot)
return(NULL)
} # power.by.time()
power.by.time(byDate[[8]][[2]])
vdbConn("vdb_power", autoYes = TRUE)
makeDisplay(byDate, name = "Power_by_Day",
desc = "Power time series for 2010 buildings by day",
panelFn = power.by.time, cogFn = kwCog)
kwCog(byDate[[73]][[2]])
kwCog <- function(x) { list(
# Compute the max and min for each day
max = cog(max(x$Power.KW, na.rm = TRUE), desc = "Max Power (KW)"),
min = cog(min(x$Power.KW, na.rm = TRUE), desc = "Min Power (KW)"),
# Some common statistics are built into trelliscope with their own cognostics functions.
# For example, cogMean() and cogRange().
meanPower = cogMean(x$Power.KW, desc = "Mean Power (KW)"),
rangePower = cogRange(x$Power.KW, desc = "Range of Power (Max - Min) (KW)"),
# Note that we use 'unique()' below because, for each subset, the value of
# month, week, and day are all repeated for a single date. So we use unique()
# to get a scalar value of these date variables
month = cog(unique(x$monthName), desc = "Month Name"),
week = cog(unique(x$week), desc = "Week in 2010"),
day = cog(unique(x$day), desc = "Julian Day in 2010")
)} # kwCog()
kwCog(byDate[[73]][[2]])
makeDisplay(byDate, name = "Power_by_Day",
desc = "Power time series for 2010 buildings by day",
panelFn = power.by.time, cogFn = kwCog)
power.v.temp <- function(x) {
# Get the limits
xlim <- tempLims
ylim <- powerLims
# Set plotting parameters
par(las = 1, mar = c(4, 4, 0.5, 0.5))
# Create a blank plot for outdoor air temp vs. power
with(x, plot(OAT.F, Power.KW, type = "n", xlim = xlim, ylim = ylim,
xlab = "Outside Air Temp (F)", ylab = "Power (KW)"))
# Add points for each building with a different color
for (i in as.character(2:5)) {
with(x[x$building == i,], points(OAT.F, Power.KW, col = as.numeric(i)-1))
}
# Add in the legend
legend(xlim[1], ylim[2],
paste("Building", 2:5),
pch = 1,
col = c(2:5) - 1)
# Returning NULL is required by trelliscope when the plotting function is
# base R code (as opposed to plots generated by lattice or ggplot)
return(NULL)
} # power.v.temp()
power.v.temp(byDate[[8]][[2]])
# Make the trelliscope display
makeDisplay(byDate, name = "Power_vs_Temp_by_Day",
desc = "Power vs. Temperature for 2010 buildings by day",
panelFn = power.v.temp, cogFn = kwCog)
myport <- 8100 # use this when running locally
view(port = myport)
