head(P)
pTest <- P[1,1:10]
pTest
mTest
pTest <- P[1,]
mTest <- M[1,]
pTest
ind <- which(colnames(pTest) == '1421')
ind
colnames(pTest)
names(pTest)
ind <- which(names(pTest) == '1421')
ind
pTest[ind]
mTest[ind]
shutOff <- apply(P, 1, function(row){
cnVals <- unique(names(row))
sapply(cnVals, function(x){
mitiSub <- P[which(names(P) == x)]
browser()
minMiti <- mitiSub[which(mitiSub != 0 && )]
})
})
shutOff <- apply(P, 1, function(row){
cnVals <- unique(names(row))
browser()
sapply(cnVals, function(x){
mitiSub <- P[which(names(P) == x)]
minMiti <- mitiSub[which(mitiSub != 0 && )]
})
})
shutOff <- apply(P, 1, function(row){
cnVals <- unique(names(row))
browser()
#   sapply(cnVals, function(x){
#     mitiSub <- P[which(names(P) == x)]
#     minMiti <- mitiSub[which(mitiSub != 0 && )]
#   })
})
cnVals
mitiSub <- row[which(names(row)==x)]
mitiSub <- row[which(names(row)==cnVals[1])]
mitiSub
source('C:/Users/venz586/Desktop/shutoffMap.R', echo=TRUE)
minInd
mitiSub
source('C:/Users/venz586/Desktop/shutoffMap.R', echo=TRUE)
shutOff[[1]]
shutOff[[2]]
shutOff[[3]]
M[1,]
shutOff[[1]]
names(shutOff[[1]])
shutOff[[1]]
soMap <- lapply(shutOff, function(x){
arcSetVals <- sapply(x, function(y) length(which(names(x) == y)))
browser()
})
arcSetVals
x
names(x)
sapply(names(x), function(y) length(which(names(x)==y)))
soMap <- lapply(shutOff, function(x){
arcSetVals <- sapply(names(x), function(y) length(which(colnames(M) == y)))
browser()
})
arcSetVals
x[[1]]
soMap <- lapply(shutOff, function(x){
arcSetVals <- sapply(names(x), function(y) which(colnames(M) == y))
browser()
})
arcSetVals[[1]]
arcSetVals[[2]]
arcSetVals[[5]]
arcSetVals[[15]]
x[[15]]
soMap <- lapply(1:nrow(M), function(i){
Mrow <- M[i,]
arcSetIndex <- sapply(names(shutOff[[i]]), function(x) which(names(Mrow) == x))
sapply(arcSetIndex, function(k){
candidate <- Mrow[k]
if(is.null(shutOff[[i]])){
# all elements are 0
candidate <- rep(0, length(candidate))
} else {
browser()
# only the minimum element is non zero
candidate[shutOff[[i]][['indOfMin']]] <- 1
candidate[]
}
})
})
candidate
shutOff[[i]]
shutOff[[i]][[i]]
shutOff[[i]][[i]]$indOfMin
rm(shutOff)
shutOff <- apply(P, 1, function(row){
cnVals <- unique(names(row))
res <- sapply(cnVals, function(x){
mitiSub <- row[which(names(row)==x)]
nzms <- which(mitiSub > 0)
if(!length(nzms)){
# There are no options enabled
# Do not need to update M
out <- NULL
} else {
minInd <- which.min(mitiSub[nzms])
out <- list('arcSS' = mitiSub, 'indOfMin' = minInd)
}
})
browser()
})
res[[1]]
res
source('C:/Users/venz586/Desktop/shutoffMap.R', echo=TRUE)
shutOff[[1]]
source('C:/Users/venz586/Desktop/shutoffMap.R', echo=TRUE)
shutOff
shutOff[1,]
P[1,]
source('C:/Users/venz586/Desktop/shutoffMap.R', echo=TRUE)
shutOff[1,]
P[1,]
hmm <- t(shutOff)
hmm[1,]
P[1,]
P[1, which(hmm[1,]==1)]
P[1, which(hmm[1,]==0)]
source('C:/Users/venz586/Desktop/shutoffMap.R', echo=TRUE)
shutOff[1,]
require(cjr)
?adaptiveSimpsons
read.delim('V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_120min.cfg')
file <- read.delim('V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_120min.cfg')
grep('schedule', file)
file[34]
file[34,]
file <- as.character(file)
file
?read.delim
read.table('V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg')
read.delim('V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg', as.is = stringsAsFactors)
read.delim('V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg')
file <- read.delim('V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg')
file
file[34,]
a <- as.character(file[34,])
a
gsub('schedule', '# schedule', a)
a <- gsub('schedule', '# schedule', a)
a
file[34,] <- a
file[34,] <- as.factor(a)
cfgFile <- read.delim('V:/BMAnoSched/BMA/cfg//opt_train/PNNL_BMA_105min.cfg')
txtFile <- apply(cfgFile, 1, as.character)
schInd <- grep('schedule', txtFile)
schInd
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
txtFile
?write.delim
?write.table
write.csv(txtFile, file = 'V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg')
txtFile
back2factor <- sapply(txtFile, as.factor)
back2factor
txtFile
as.factor(txtFile[1])
as.factor(txtFile[2])
back2factor
rm(back2factor)
back2factor <- sapply(txtFile, funtion(x) as.factor(x))
back2factor <- sapply(txtFile, function(x) as.factor(x))
back2factor[1]
as.character(back2factor[1])
as.data.frame(back2factor)
write.csv(back2factor, file = 'V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg')
write.csv(txtFile, file = 'V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg', quote = F)
txtFile
write.csv(txtFile, file = 'V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg', quote = F, row.names = F)
rm(list = ls())
source('C:/Users/venz586/Desktop/txtReplace.R', echo=TRUE)
txtFile
?write.csv
source('C:/Users/venz586/Desktop/txtReplace.R', echo=TRUE)
source('C:/Users/venz586/Desktop/txtReplace.R', echo=TRUE)
write.csv(txtFile, file = 'V:/BMAnoSched/BMA/cfg/opt_train/PNNL_BMA_105min.cfg',
quote = F, row.names = F)
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?findSS
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?confRaw
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
1 - 175/176
?confRaw
require(scs)
rho <- c(1, .5, .25)
N <- rep(1000,3)
B <- 175
confRaw(rep(0,3), rho, N, B)
confRaw(rep(0,3), rho, N, B, 30)
confRaw(c(1,0,0), rho, N, B, 30)
source('~/.active-rstudio-document', echo=TRUE)
ub <- floor(.01*sum(N))
source('~/.active-rstudio-document', echo=TRUE)
p = B/(1+B)
p
1-p
?findSS
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
p
(1-p)*100
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
require(scs)
?findSS
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rm(list = ls())
?writeLines
require(cjr)
?fnrConf.hgeo
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
thresh
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?calcConf
calcConf(n1=n1, n2=n2, thresh=thresh, N=n, prior.prob = prior, r = rho)
calcConf(n1=n1, n=n2, thresh=thresh, N=n, prior.prob = prior, r = rho)
calcConf(n1=n1, n2=n2, thresh=thresh, N=N, prior.prob = prior, r = rho)
calcConf(n1=n1, n2=n2, thresh=thresh, N=N, maxN = 1e05, prior.prob = prior, r = rho)
1 - .034
1 - .027
1-.011
.174/.07
.07/.174
.034/.089
.027/.046
.011/.014
require(scs)
?findSS
load("V:/Lines of Evidence/LoE_Brett_2_17_15.RData")
building1
building2
load("V:/Lines of Evidence/LoE_Brett_2_17_15_srs.RData")
srs
building1
building2
srs
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_EES__opt_train_15min.Rdata")
dat <- dat[complete.cases(dat),]
dat
dat$bma <- round(dat$bma,0)
dat
sqrt(mean((dat$act - dat$bma)^2))
sqrt(mean((dat$act - dat$schedule)^2))
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_EES__opt_train_60min.Rdata")
dat <- dat[complete.cases(dat),]
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NYIS__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NYIS__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NYIS__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_EES__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_EES__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_EES__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NYIS__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_EES__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
rm(list = ls())
install.packages('Rmarkdown')
install.packages('rmarkdown')
require(rmarkdown)
source('~/.active-rstudio-document', echo=TRUE)
install.packages('trelliscope')
install.packages('base64enc')
install.packages('shiny')
install.packages('jsonlite')
install.packages('fastICA')
require(trelliscope)
source('~/.active-rstudio-document', echo=TRUE)
load('plottingLims.Rdata')
setwd('~/docs-csp2015/demo_docs/power_demo.Rmd')
setwd('~/docs-csp2015/demo_docs/power_demo')
setwd('~/docs-csp2015/demos/power_demo')
library(trelliscope)
vdbConn("vdb_power")
myport <- 8100 # use this when running locally on your own computer
view(port = myport)
rm(list = ls())
d <- read.csv("retailBuildings.csv")
head(d)
str(d)
d$dateTime <- as.POSIXct(d$dateTime)
d$date <- as.POSIXct(d$date)
str(d)
summary(d)
with(d, table(building))
sel <- c("building", "year", "quarter", "month", "monthName", "week", "weekday")
apply(d[,sel], MARGIN = 2, table)
library(plyr)
byDate <- divide(d, by = "date", postTransFn = function(x) arrange(x, building, dateTime))
byDate
str(byDate[1])
byDate[1]
powerLims <- range(d$Power.KW)
tempLims <- range(d$OAT.F)
power.by.time <- function(x) {
# Get the x and y axis limits
# Global limits for y
ylim <- powerLims
# Local limits for x
xlim <- range(x$dateTime)
# Set plotting options
par(las = 2, mar = c(4, 4, 0.5, 0.5))
# Create a blank plot
with(x, plot(dateTime, Power.KW, type = "n", xlim = xlim, ylim = ylim,
xlab = "", ylab = "Power (KW)"))
# Add in the data for each building, giving each building a different color
for (i in as.character(2:5)) {
with(x[x$building == i,],
lines(dateTime, Power.KW, col = as.numeric(i) - 1, lwd = 2))
}
# Add a legend to the plot
legend(xlim[1] + 0.5 * diff(xlim), ylim[1],
paste("Building", 2:5),
lty = 1, col = c(2:5) - 1, lwd = 3, yjust = 0)
# Returning NULL is required by trelliscope when the plotting function is
# base R code (as opposed to plots generated by lattice or ggplot)
return(NULL)
} # power.by.time()
power.by.time(byDate[[8]][[2]])
kwCog <- function(x) { list(
# Compute the max and min for each day
max = cog(max(x$Power.KW, na.rm = TRUE), desc = "Max Power (KW)"),
min = cog(min(x$Power.KW, na.rm = TRUE), desc = "Min Power (KW)"),
# Some common statistics are built into trelliscope with their own cognostics functions.
# For example, cogMean() and cogRange().
meanPower = cogMean(x$Power.KW, desc = "Mean Power (KW)"),
rangePower = cogRange(x$Power.KW, desc = "Range of Power (Max - Min) (KW)"),
# Note that we use 'unique()' below because, for each subset, the value of
# month, week, and day are all repeated for a single date. So we use unique()
# to get a scalar value of these date variables
month = cog(unique(x$monthName), desc = "Month Name"),
week = cog(unique(x$week), desc = "Week in 2010"),
day = cog(unique(x$day), desc = "Julian Day in 2010")
)} # kwCog()
kwCog(byDate[[73]][[2]])
vdbConn("vdb_power", autoYes = TRUE)
makeDisplay(byDate, name = "Power_by_Day",
desc = "Power time series for 2010 buildings by day",
panelFn = power.by.time, cogFn = kwCog)
power.v.temp <- function(x) {
# Get the limits
xlim <- tempLims
ylim <- powerLims
# Set plotting parameters
par(las = 1, mar = c(4, 4, 0.5, 0.5))
# Create a blank plot for outdoor air temp vs. power
with(x, plot(OAT.F, Power.KW, type = "n", xlim = xlim, ylim = ylim,
xlab = "Outside Air Temp (F)", ylab = "Power (KW)"))
# Add points for each building with a different color
for (i in as.character(2:5)) {
with(x[x$building == i,], points(OAT.F, Power.KW, col = as.numeric(i)-1))
}
# Add in the legend
legend(xlim[1], ylim[2],
paste("Building", 2:5),
pch = 1,
col = c(2:5) - 1)
# Returning NULL is required by trelliscope when the plotting function is
# base R code (as opposed to plots generated by lattice or ggplot)
return(NULL)
} # power.v.temp()
power.v.temp(byDate[[8]][[2]])
# Make the trelliscope display
makeDisplay(byDate, name = "Power_vs_Temp_by_Day",
desc = "Power vs. Temperature for 2010 buildings by day",
panelFn = power.v.temp, cogFn = kwCog)
# Launch the trelliscope viewer (must be in Firefox, Chrome, or Safari--not
# Internet Explorer)
myport <- 8100 # use this when running locally
# myport <- Sys.getenv("TR_PORT") # use this on demo cluster
view(port = myport)
rm(list = ls())
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_CIN__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
dat
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_CIN__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_CIN__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_DUK__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_DUK__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_EES__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_EES__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_LIND__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_LIND__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_MECS__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_MECS__opt_train_30min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_MECS__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NEPT__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NEPT__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NYIS__opt_train_15min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NYIS__opt_train_30min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NYIS__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_CIN__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_DUK__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_EES__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_LIND__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_MECS__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NEPT__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NYIS__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
# Load necessary libraries and initialize environment
library(datadr)
library(trelliscope)
################################################################################
#### Let's set the working directory for this example. You may have to change the
#### path in the command below to correctly point to the 'netflow_demo' directory
setwd("netflow_demo")
# Remove any left-over objects in the Global environment
rm(list = ls())
###############################################################################
#### To see the Trelliscope display execute this section. The code that creates
#### these displays is below, but cannot be run locally.
vdbConn("vdb_netflow", autoYes = TRUE)
myport <- 8100 # use this when running locally on your own computer
# myport <- Sys.getenv("TR_PORT") # use this on demo cluster
view(port = myport)
setwd('~/docs-csp2015/demos/netflow_demo/')
# Remove any left-over objects in the Global environment
rm(list = ls())
###############################################################################
#### To see the Trelliscope display execute this section. The code that creates
#### these displays is below, but cannot be run locally.
vdbConn("vdb_netflow", autoYes = TRUE)
myport <- 8100 # use this when running locally on your own computer
# myport <- Sys.getenv("TR_PORT") # use this on demo cluster
view(port = myport)
vdbConn("vdb_netflow", autoYes = TRUE)
myport <- 8100 # use this when running locally on your own computer
# myport <- Sys.getenv("TR_PORT") # use this on demo cluster
view(port = myport)
rm(list = ls())
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_CIN__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NEPT__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_LIND__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_MECS__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
load("C:/Users/venz586/Desktop/PJM_ar8_2_17/BMA/data/pred/pool_NYIS__opt_train_60min.Rdata")
source('~/.active-rstudio-document', echo=TRUE)
